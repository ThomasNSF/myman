#!/usr/bin/open -a ToolServer
# -*- shell-script -*- coding: mac-roman -*-
# macbuild.txt - MPW build script for the MyMan video game
# Copyright 2008, Benjamin C. Wiley Sittler <bsittler@gmail.com>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# NOTE: In vim you have to do :e! right after opening this file to get
# the correct encoding (MacRoman) displayed

### Building MyMan for Carbon and Classic PowerPC Mac OS in
### MPW Shell or ToolServer
#
# Get MPW
#
# 1) Install the Macintosh Programmer's Workshop (MPW)
#
#    http://developer.apple.com/tools/mpw-tools/
#
# 2) Launch MPW Shell and raise MPW Memory Limits:
#
# HINT: Use Enter or Cmd-Return to run commands in MPW Shell;
#       omit the leading number sign (#) too
#
#setshellsize -f "{MPW}ToolServer" -s 4096k -p 65536k
#setshellsize -s 4096k -p 65536k
#
# 3) Navigate MPW Shell to MyMan source directory
#
#directory volName:path:to:myman
#
# 4) Set type code of this file:
#
#setfile -t TEXT macbuild.txt
#
# 5) Convert line endings of this file:
#
# HINT: The non-ASCII symbol in the commands below is MacRoman 0xB0,
#       a.k.a. Unicode U+221E INFINITY, a.k.a. Option-5.
#
# NOTE: This loses the clipboard selection.
#
#open -n -h macbuild.txt
#copy 1:° macbuild.txt
#delete -i macbuild
#new -h macbuild
#paste 1:° macbuild
#save macbuild
#close macbuild.txt
#close macbuild
#
# 6) Build MyMan MPW Tool and Carbon application:
#
#macbuild smallman
#
# 7) Run MyMan MPW Tool (PowerPC only, for now):
#
#smallman
#
# 8) Launch MyMan Carbon application (PowerPC only and either Mac OS X
#    or Mac OS 8.6 or greater with CarbonLib 1.6):
#
#carbon-smallman

set Exit 1
export Exit
set TraceFailures 1
export TraceFailures

set all_sizes "bigman hugeman smallman squareman"
set sizes "{{all_sizes}}"

set all_hosts "68k-mpw ppc-mpw ppc-mpw-uni ppc ppc-uni carbon carbon-uni"
set hosts "ppc-mpw carbon"

set specs "{{sizes}}"

if {#} <> 0
    set specs ""
    loop
        if {#} == 0
            break
        end
        set specs "{{specs}} {{1}}"
        shift
    end
end

# make sure this is the source directory
if not "``exists -f :src:myman.c``"
    echo "#could not find MyMan sources in directory {{directory}}" > dev:stderr
    exit 2
end

# create our line ending conversion tool
delete -i u2m.c u2m.c.x u2m.c.o u2m.NJ
echo '#include <stdio.h>' > u2m.c
echo 'int main(void){int i,j;while(1){i=getchar();if(i==-1) break;' >> u2m.c
echo 'if(i==0x0d){j=getchar();if(j==0x0a)i=0x0a;else if(j!=-1)ungetc(j,stdin);}' >> u2m.c
echo 'if(i==0x0a)i=0x0d;putchar(i);}return 0;}' >> u2m.c
delete -i u2m u2m.make u2m.makeout &&
createmake u2m u2m.c -tool &&
make -e -f u2m.make > u2m.makeout &&
u2m.makeout

setfile -t TEXT VERSION COPYRIGHT
set MYMANVERSION "``catenate VERSION | :u2m``"
set MYMANCOPYRIGHT "``catenate COPYRIGHT | :u2m``"

# delete our line ending conversion tool after use
delete -i u2m.c u2m.c.x u2m.c.o u2m.NJ
delete -i u2m u2m.make u2m.makeout

# for sending string literals to the C compiler and including the solidus in them (which MyMan autoconverts to colon when needed)
set char_quotation_mark "'"'"'"'"
set char_solidus "{{char_quotation_mark}}CHAR_SOLIDUS{{char_quotation_mark}}"

# "myman" is the default maze; see Makefile for more
set MAZEFILE_myman "maze.txt"
set mymanmaze "-D MAZEFILE={{char_quotation_mark}}lvl{{char_solidus}}{{MAZEFILE_myman}}{{char_quotation_mark}}"
set myman "-D MYMANVARIANT={{char_quotation_mark}}myman{{char_quotation_mark}} {{mymanmaze}}"

# "big" is the default size (large ASCII-art pictures)
set bigman "{{big}} {{myman}}"

# "huge" is the largest size (huge ASCII-art pictures)
set TILEFILE_huge "chr5x3.txt"
set hugetiles "-D TILEFILE={{char_quotation_mark}}chr{{char_solidus}}{{TILEFILE_huge}}{{char_quotation_mark}}"
set SPRITEFILE_huge "spr10x6.txt"
set hugesprites "-D SPRITEFILE={{char_quotation_mark}}spr{{char_solidus}}{{SPRITEFILE_huge}}{{char_quotation_mark}}"
set huge "-D MYMANSIZE={{char_quotation_mark}}huge{{char_quotation_mark}} {{hugetiles}} {{hugesprites}}"
set hugeman "{{huge}} {{myman}}"

# "small" uses a pair of character-cells to represent each tile and sprite
set TILEFILE_small "khr2h.txt"
set smalltiles "-D TILEFILE={{char_quotation_mark}}chr{{char_solidus}}{{TILEFILE_small}}{{char_quotation_mark}}"
set SPRITEFILE_small "spr2h.txt"
set smallsprites "-D SPRITEFILE={{char_quotation_mark}}spr{{char_solidus}}{{SPRITEFILE_small}}{{char_quotation_mark}}"
set small "-D MYMANSIZE={{char_quotation_mark}}small{{char_quotation_mark}} {{smalltiles}} {{smallsprites}}"
set smallman "{{small}} {{myman}}"

# "square" uses one character-cell to represent each tile and sprite
set TILEFILE_square "khr1.txt"
set squaretiles "-D TILEFILE={{char_quotation_mark}}chr{{char_solidus}}{{TILEFILE_square}}{{char_quotation_mark}}"
set SPRITEFILE_square "spr1.txt"
set squaresprites "-D SPRITEFILE={{char_quotation_mark}}spr{{char_solidus}}{{SPRITEFILE_square}}{{char_quotation_mark}}"
set square "-D MYMANSIZE={{char_quotation_mark}}square{{char_quotation_mark}} {{squaretiles}} {{squaresprites}}"
set squareman "{{square}} {{myman}}"

for spec in {specs}
    set matched 0
    for host in {all_hosts}
        if :"{{spec}}" == :"{{host}}"
            set matched 1
            break
        end
        for size in {all_sizes}
            if :"{{spec}}" == :"{{host}}-{{size}}" or :"{{spec}}" == :"{{size}}"
                set matched 1
                break
            end
        end
        if {{matched}} != 0
            break
        end
    end
    if {{matched}} == 0
        echo "#build specifier {{spec}} not recognized" > dev:stderr
        echo '#usage: '"{{0}}"' [ {host}[-{size}] | {size} ]' > dev:stderr
        echo "#where hosts is one of: {{all_hosts}}" > dev:stderr
        echo "#and size is one of: {{all_sizes}}" > dev:stderr
        exit 2
    end
end

for size in {all_sizes}
    set sizematched ""
    for size1 in {sizes}
        if :"{{size}}" == :"{{size1}}"
            set sizematched "{{size}}"
            break
        end
    end
    for host in {all_hosts}
        set hostmatched ""
        for host1 in {hosts}
            if :"{{host}}" == :"{{host1}}"
                set hostmatched "{{host}}"
                break
            end
        end
        set matched 0
        for spec in {specs}
            if :"{{spec}}-{{sizematched}}" == :"{{host}}-{{size}}" or :"{{spec}}" == :"{{host}}-{{size}}" or :"{{hostmatched}}-{{spec}}" == :"{{host}}-{{size}}"
                set matched 1
                break
            end
        end
        if {{matched}} != 0
            set hostsize "{{size}}"
            set host1 "{{host}}"
            for host2 in {hosts}
                set host1 "{{host2}}"
                break
            end
            if :"{{spec}}" != :"{{size}}" or :"{{host}}" != :"{{host1}}"
                set hostsize "{{host}}-{{size}}"
            end
            delete -i "{{hostsize}}".makeout
            echo 'set DEFS "{{'"{{size}}"'}}"' > "{{hostsize}}".makeout
            execute "{{hostsize}}".makeout
            delete -i "{{hostsize}}".makeout
            if ":{{DEFS}}" == ":"
                echo "#size {{size}} not defined" > dev:stderr
                exit 2
            end
            setfile -t TEXT :inc:maccurs.h :inc:utils.h :src:myman.c :src:utils.c :mygetopt:getopt.h :mygetopt:mygetopt.c :mygetopt:mygetopt.h :inc:optcurs.h &&
            set CFLAGS "-noMapCR -includes unix -D MACCURSES=1 -D MYGETOPT_H={{char_quotation_mark}}getopt.h{{char_quotation_mark}} -D MYMANVERSION={{char_quotation_mark}}``quote "{{MYMANVERSION}}"``{{char_quotation_mark}} -D MYMANCOPYRIGHT={{char_quotation_mark}}``quote "{{MYMANCOPYRIGHT}}"``{{char_quotation_mark}} {{DEFS}}" &&

            # Ppc libraries for the non-Carbon builds
            set PPCLIBS ""
            for lib in CarbonAccessors.o
                set PPCLIBS "{{LIBS}} ``quote "{{PPCLibraries}}{{lib}}"``"
            end

            # Shared libraries for the non-Carbon builds
            set LIBS ""
            for lib in FontManager TextCommon WindowsLib AppearanceLib ATSUnicodeLib TextEncodingConverter
                set LIBS "{{LIBS}} `quote "{{SharedLibraries}}{{lib}}"`"
            end

            delete -i myman.NJ myman.c.o myman.c.x &&
            delete -i utils.NJ utils.c.o utils.c.x &&
            delete -i mygetopt.c.o mygetopt.c.x mygetopt.NJ &&
            delete -i "{{hostsize}}" "{{hostsize}}".make "{{hostsize}}".makeout &&
            if ":{{host}}" == ":68k-mpw"
                # Classic 68k toolbox QuickDraw Text MPW tool (compiler runs out of memory; probably other problems, too)
                createmake "{{hostsize}}" -I :inc: -I :mygetopt: :src:myman.c :src:utils.c :mygetopt:mygetopt.c {LIBS} -68k -tool -COptions "{{CFLAGS}} -opt space"
            else if ":{{host}}" == ":ppc-mpw"
                # Classic Ppc toolbox QuickDraw Text MPW tool
                createmake "{{hostsize}}" -I :inc: -I :mygetopt: :src:myman.c :src:utils.c :mygetopt:mygetopt.c {PPCLIBS} {LIBS} -powerpc -tool -ppcCOptions "{{CFLAGS}}"
            else if ":{{host}}" == ":ppc-mpw-uni"
                # Classic Ppc toolbox ATSUI MPW tool
                createmake "{{hostsize}}" -I :inc: -I :mygetopt: :src:myman.c :src:utils.c :mygetopt:mygetopt.c {PPCLIBS} {LIBS} -powerpc -tool -ppcCOptions "{{CFLAGS}} -D UNICODE=1"
            else if ":{{host}}" == ":ppc"
                # Classic Ppc toolbox QuickDraw Text application
                createmake "{{hostsize}}" -I :inc: -I :mygetopt: :src:myman.c :src:utils.c :mygetopt:mygetopt.c {PPCLIBS} {LIBS} -powerpc -ppcCOptions "{{CFLAGS}}"
            else if ":{{host}}" == ":ppc-uni"
                # Classic Ppc toolbox ATSUI application
                createmake "{{hostsize}}" -I :inc: -I :mygetopt: :src:myman.c :src:utils.c :mygetopt:mygetopt.c {PPCLIBS} {LIBS} -powerpc -ppcCOptions "{{CFLAGS}} -D UNICODE=1"
            else if ":{{host}}" == ":carbon"
                # Carbon QuickDraw Text application
                createmake "{{hostsize}}" -I :inc: -I :mygetopt: :src:myman.c :src:utils.c :mygetopt:mygetopt.c -powerpc -carbon -ppcCOptions "{{CFLAGS}}"
            else if ":{{host}}" == ":carbon-uni"
                # Carbon ATSUI application
                createmake "{{hostsize}}" -I :inc: -I :mygetopt: :src:myman.c :src:utils.c :mygetopt:mygetopt.c -powerpc -carbon -ppcCOptions "{{CFLAGS}} -D UNICODE=1"
            else
                echo "#host {{host}} not defined" > dev:stderr
                exit 2
            end &&
            make -e -f "{{hostsize}}".make > "{{hostsize}}".makeout &&
            "{{hostsize}}".makeout &&
            echo "{{hostsize}} #MyMan {{MYMANVERSION}} host {{host}} size {{size}}" &&
            delete -i myman.NJ myman.c.o myman.c.x &&
            delete -i utils.NJ utils.c.o utils.c.x &&
            delete -i mygetopt.c.o mygetopt.c.x mygetopt.NJ &&
            delete -i "{{hostsize}}".make "{{hostsize}}".makeout
        end
    end
end

# vim:fencs=macroman
